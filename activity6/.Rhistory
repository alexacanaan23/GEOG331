#spplot maps vector data with different colors
spplot(g1966, "GLACNAME")
#spplot maps vector data with different colors
library(spplot)
splot(g1966, "GLACNAME")
#make a brick that stacks all layers
rgbL <- brick(redL, greenL, blueL)
library(raster)
library(sp)
library(rgdal)
library(rgeos)
library(plyr)
#READ IN VECTOR DATA - GLACIER OUTLINES
#read in shapefiles
#readOGR in rgdal does this
g1966 <- readOGR("Y:\\Students\\hkropp\\a06\\GNPglaciers\\GNPglaciers_1966.shp")
plot(g1966,axes="TRUE")
g1998 <- readOGR("Y:\\Students\\hkropp\\a06\\GNPglaciers\\GNPglaciers_1998.shp")
plot(g1998,axes="TRUE")
g2005 <- readOGR("Y:\\Students\\hkropp\\a06\\GNPglaciers\\GNPglaciers_2005.shp")
plot(g2005,axes="TRUE")
g2015 <- readOGR("Y:\\Students\\hkropp\\a06\\GNPglaciers\\GNPglaciers_2015.shp")
plot(g2015,axes="TRUE")
str(g2015)
#data stores all accompanying info/measurements for each spatial object
head(g2015@data)
#polygons stores the coordinates for drawing the polygons
g2015@polygons[[1]]
#vector object
g1966@proj4string
#get polygon coordinates
g1966@polygons[[1]]@Polygons[[1]]
#QUESTION 1 - NO CODE
#spplot maps vector data with different colors
library(spplot)
spplot(g1966, "GLACNAME")
#WORKING WITH RASTER DATA
#read in rgb imagery from landsat
redL <- raster("Y:\\Students\\hkropp\\a06\\glacier_09_05_14\\l08_red.tif")
greenL <- raster("Y:\\Students\\hkropp\\a06\\glacier_09_05_14\\l08_green.tif")
blueL <- raster("Y:\\Students\\hkropp\\a06\\glacier_09_05_14\\l08_blue.tif")
#check coordinate system
redL@crs
#make a brick that stacks all layers
rgbL <- brick(redL, greenL, blueL)
#make a brick that stacks all layers
rgbL <- brick(redL, greenL, blueL)
#plot with color
#show axes for reference
#add contrast to the imagery to see it better
par(mai=c(1,1,1,1))
plotRGB(rgbL, stretch="lin", axes=TRUE)
#add polygons to plot
plot(g1966, col="tan3", border=NA, add=TRUE)
plot(g1998, col="royalblue3", add=TRUE, border=NA)
plot(g2005, col="darkgoldenrod4", add=TRUE, border=NA)
plot(g2015, col="tomato3", add=TRUE, border=NA)
#set up years to read in
ndviYear <- seq(2003,2016)
#read all files into a list
NDVIraster <- list()
for(i in 1:length(ndviYear)){
NDVIraster[[i]] <- raster(paste0("Y:\\Students\\hkropp\\a06\\NDVI\\NDVI_",ndviYear[i],".tif"))
}
#use ext to zoom on a specific area
plotRGB(rgbL, ext=c(289995,310000,5371253,5400000), stretch="lin")
plot(g1966, col="palegreen2", border=NA, add=TRUE)
plot(g1998, col="royalblue3", add=TRUE, border=NA)
plot(g2005, col="darkgoldenrod4", add=TRUE, border=NA)
p
#set up years to read in
ndviYear <- seq(2003,2016)
#read all files into a list
NDVIraster <- list()
for(i in 1:length(ndviYear)){
NDVIraster[[i]] <- raster(paste0("Y:\\Students\\hkropp\\a06\\NDVI\\NDVI_",ndviYear[i],".tif"))
}
str(NDVIraster[[1]])
#get projection
NDVIraster[[1]]@crs
#spplot maps vector data with different colors
library(spplot)
#spplot maps vector data with different colors
spplot(g1966, "GLACNAME")
#check glacier names
g1966@data$GLACNAME
g2015@data$GLACNAME
#fix glacier name so that it is consistent with the entire time period
g2015@data$GLACNAME <- ifelse(g2015@data$GLACNAME == "North Swiftcurrent Glacier",
"N. Swiftcurrent Glacier",
ifelse(   g2015@data$GLACNAME ==  "Miche Wabun",
"Miche Wabun Glacier",
as.character(g2015@data$GLACNAME)))
plot(NDVIraster[[1]])
NDVIraster[[1]]@crs
plot(NDVIraster[[1]])
g1966p <- spTransform(g1966,NDVIraster[[1]]@crs)
g1998p <- spTransform(g1998,NDVIraster[[1]]@crs)
g2005p <- spTransform(g2005,NDVIraster[[1]]@crs)
g2015p <- spTransform(g2015,NDVIraster[[1]]@crs)
gAllp1 <- join(g1966p@data,g1998p@data, by="GLACNAME", type="full")
gAllp2 <- join(gAllp1,g2005p@data, by="GLACNAME", type="full")
gAll <- join(gAllp2,g2015p@data, by="GLACNAME", type="full")
plot(c(1966,1998,2005,2015),
c(gAll$a1966m.sq[1],gAll$a1998m.sq[1], gAll$a2005m.sq[1],gAll$a2015m.sq[1]),
type="b",
pch=19, col=rgb(0.5,0.5,0.5,0.5), xlim= c(1965,2016),
ylim=c(0,2000000),
ylab="Area of glacier (meters squared)",
xlab="Year")
for(i in 2:39){
points(c(1966,1998,2005,2015),
c(gAll$a1966m.sq[i],gAll$a1998m.sq[i], gAll$a2005m.sq[i],gAll$a2015m.sq[i]),
type="b",
pch=19, col=rgb(0.5,0.5,0.5,0.5))
}
plot(c(1966,1998,2005,2015),
c(gAll$a1966m.sq[1],gAll$a1998m.sq[1], gAll$a2005m.sq[1],gAll$a2015m.sq[1]),
type="b",
pch=19, col=rgb(0.5,0.5,0.5,0.5), xlim= c(1965,2016),
ylim=c(0,2000000),
ylab="Area of glacier (meters squared)",
xlab="Year")
#VISUALIZE GLACIER LOSS
diffPoly <- gDifference(g1966p, g2015p)
plot(diffPoly)
#plot with NDVI
plot(NDVIraster[[13]], axes=FALSE, box=FALSE)
plot(diffPoly,col="black", border=NA,add=TRUE)
#extract NDVI values
NDVIdiff <- list()
meanDiff <- numeric(0)
#loop through all NDVI years
for(i in 1:length(ndviYear)){
#get raster values in the difference polygon
NDVIdiff[[i]] <- extract(NDVIraster[[i]],diffPoly)[[1]]
#calculate the mean of the NDVI values
meanDiff[i] <- mean(NDVIdiff[[i]], na.rm=TRUE)
}
plot(ndviYear, meanDiff, type="b",
xlab= "Year",
ylab="Average NDVI (unitless)",
pch=19)
#designate that NDVIraster list is a stack
NDVIstack <- stack(NDVIraster)
#set up lm function to apply to every cell
#where x is the value of a cell
#need to first skip NA values (like lakes)
#if NA is missing in first raster, it is missing in all
#so we can tell R to assign an NA rather than fitting the function
timeT <- ndviYear
fun <- function(x) {
if(is.na(x[1])){
NA}else{
#fit a regression and extract a slope
lm(x ~ timeT)$coefficients[2] }}
#apply the slope function to the rasters
NDVIfit <- calc(NDVIstack,fun)
#plot the change in NDVI
plot(NDVIfit, axes=FALSE)
glacier500m <- gBuffer(g1966p,#data to buffer
byid=TRUE,#keeps original shape id
width=500)#width in coordinate system units
#rasterize gralciers
glacRaster <- rasterize(g1966p, NDVIraster[[1]], field=g1966p@data$GLACNAME, background=0)
#subtract buffer from original glacier
glacZones <- buffRaster - glacRaster
plot(glacZones)
meanChange <- zonal(NDVIfit, #NDVI function to summarize
glacZones,#raster with zones
"mean")#function to apply
head(meanChange)
plot(g1966,axes="TRUE")
plot(g1998,axes="TRUE")
plot(g2005,axes="TRUE")
plot(g2015,axes="TRUE")
str(g2015)
#data stores all accompanying info/measurements for each spatial object
head(g2015@data)
#QUESTION 3
par(mfrow = c(1,2))
par(mfrow = c(1,2))
plot(NDVIraster[[1]])
plot(g1966, axes=TRUE)
plot(NDVIraster[[1]]. axes=TRUE)
#QUESTION 3
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE)
plot(g1966, axes=TRUE)
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
#QUESTION 3
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
plot(g1966, axes=TRUE)
#QUESTION 3
par(mai=c(1,1,1,1))
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
plot(g1966, axes=TRUE)
par(mai=c(1,1,1,1))
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
plot(g1966, axes=TRUE)
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
plot(g1966, axes=TRUE)
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
plot(g1966, axes=TRUE)
par(mfrow = c(1,2))
plot(NDVIraster[[1]], axes=TRUE, xaxis="i", yaxis="i")
plot(g1966, axes=TRUE)
g1966@proj4string
