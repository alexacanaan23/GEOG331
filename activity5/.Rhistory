seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
legend("topright", c("mean","1 standard deviation"), #legend items
lwd=c(2,NA),#lines
col=c("black",rgb(0.392, 0.584, 0.929,.2)),#colors
pch=c(NA,15),#symbols
bty="n")#no legend border
#QUESTION 5
#add a line that shows 2017 observations
#create a data frame that just has 2017 observations
datD2017<-subset(datD, datD$year==2017)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,180),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
#show sd
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
lines(datD2017$doy, datD2017$discharge, col="red")
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,180, by=30),
seq(0,180, by=30),
las = 2)#show ticks at 90 degree angle
#QUESTION 6 - NO CODE
#QUESTION 7
#create a dataframe that indicates what days have a full 24 hours
#of precipitation measurements
#give each obs a count
datD["Count"]<-1
#dataframe with all days and their number of observations
datC<-aggregate(datD[c("Count")], by=list(datD$date), FUN="sum")
#check number of observations there should be per day
4*24
#days with a full 24 hours of precipitation measurements
datC1<-subset(datC, datC$Count>=96)
#create a data frame with only days with full measures, start FALSE
datD["Full"]<-FALSE
View(datD)
for (i in length(datD$date)) {
if (datD$date[i] %in% datC1$Group.1){
datD$Full[i] == TRUE
}
}
View(datD)
datD <- transform(datD, Full= ifelse(dateD$date %in% datC$Group.1), TRUE)
datD <- transform(datD, Full= ifelse(datD$date %in% datC1$Group.1), TRUE)
datD <- transform(datD, Full= ifelse(datD$date %in% datC1$Group.1), TRUE, FALSE)
datD <- transform(datD, Full= ifelse(datD$date %in% datC1$Group.1, TRUE, FALSE))
View(datD)
help(ifelse)
#plot of discharge measures
library(ggplot2)
View(datP)
#give each obs a count
datP["Count"]<-1
#dataframe with all days and their number of observations
datC<-aggregate(datP[c("Count")], by=list(datP$DATE), FUN="sum")
View(datC)
#days with a full 24 hours of precipitation measurements
datC1<-subset(datC, datC$Count==24)
View(datC1)
View(datC)
#calculate times for datP
datP$hour <- hour(dateP ) + (minute(dateP )/60)
#get full decimal time
datP$decDay <- datP$doy + (datP$hour/24)
#calculate a decimal year, but account for leap year
datP$decYear <- ifelse(leap_year(datP$year),datP$year + (datP$decDay/366),
datP$year + (datP$decDay-1/365))
View(datD)
datP$day<-ymd(datP$DATE)
datP$day<-ymd_hm(datP$DATE)
#strip time
datP$dateonly<-Date(datP$day)
#strip time
datP$dateonly<-as.Date(datP$day)
#dataframe with all days and their number of observations
datC<-aggregate(datP[c("Count")], by=list(datP$dateonly), FUN="sum")
#days with a full 24 hours of precipitation measurements
datC1<-subset(datC, datC$Count==24)
#create a data frame with only days with full measures, start FALSE
datD["Full"]<-FALSE
#create a data frame with only days with full measures, start FALSE
datP["Full"]<-FALSE
#indicate if obs is part of day of full measure
datP <- transform(datP, Full= ifelse(datP$dateonly %in% datC1$Group.1, TRUE, FALSE))
datCombine<- datD
#Alexa Canaan
#activity 5
#QUESTION 1 - NO CODE NECESSARY
#load in lubridate
library(lubridate)
#read in streamflow data
datH <- read.csv("y:\\Data\\activities\\a05\\stream_flow_data.csv",
na.strings = c("Eqp"))
#read data on the mac
datH <- read.csv("~/Desktop/GitHub/GEOG331/a05/stream_flow_data.csv", na.strings = c("Eqp"))
#preview data
head(datH)
#read in precipitation data
#hourly precipitation is in mm
datP <- read.csv("y:\\Data\\activities\\a05\\2049867.csv")
#read data on the mac
datP <- read.csv("~/Desktop/GitHub/GEOG331/a05/2049867.csv")
#preview data
head(datP)
#only use most reliable measurements
datD <- datH[datH$discharge.flag == "A",]
#QUESTION 2
#### define time for streamflow #####
#convert date and time
datesD <- as.Date(datD$date, "%m/%d/%Y")
#get day of year
datD$doy <- yday(datesD)
#calculate year
datD$year <- year(datesD)
#define time
timesD <- hm(datD$time)
#### define time for precipitation #####
dateP <- ymd_hm(datP$DATE)
#get day of year
datP$doy <- yday(dateP)
#get year
datP$year <- year(dateP)
#### get decimal formats #####
#convert time from a string to a more usable format
#with a decimal hour
datD$hour <- hour(timesD ) + (minute(timesD )/60)
#get full decimal time
datD$decDay <- datD$doy + (datD$hour/24)
#calculate a decimal year, but account for leap year
datD$decYear <- ifelse(leap_year(datD$year),datD$year + (datD$decDay/366),
datD$year + (datD$decDay-1/365))
#calculate times for datP
datP$hour <- hour(dateP ) + (minute(dateP )/60)
#get full decimal time
datP$decDay <- datP$doy + (datP$hour/24)
#calculate a decimal year, but account for leap year
datP$decYear <- ifelse(leap_year(datP$year),datP$year + (datP$decDay/366),
datP$year + (datP$decDay-1/365))
#format precipitaiton date column
datP$day<-ymd_hm(datP$DATE)
#strip time
datP$dateonly<-as.Date(datP$day)
#plot discharge
plot(datD$decYear, datD$discharge, type="l", xlab="Year", ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")))
#QUESTION 3 - No code
#QUESTION 4
#look up documentation
help(expression())
#basic formatting
aveF <- aggregate(datD$discharge, by=list(datD$doy), FUN="mean")
colnames(aveF) <- c("doy","dailyAve")
sdF <- aggregate(datD$discharge, by=list(datD$doy), FUN="sd")
colnames(sdF) <- c("doy","dailySD")
#start new plot
dev.new(width=8,height=8)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i")#remove gaps from axes
#show standard deviation around the mean
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,80, by=20),
seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,80, by=20),
seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
legend("topright", c("mean","1 standard deviation"), #legend items
lwd=c(2,NA),#lines
fill=c(NA,rgb(0.392, 0.584, 0.929,.2)),#fill boxes
border=NA,#no border for both fill boxes (don't need a vector here since both are the same)
bty="n")#no legend border
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,80, by=20),
seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
legend("topright", c("mean","1 standard deviation"), #legend items
lwd=c(2,NA),#lines
col=c("black",rgb(0.392, 0.584, 0.929,.2)),#colors
pch=c(NA,15),#symbols
bty="n")#no legend border
#QUESTION 5
#add a line that shows 2017 observations
#create a data frame that just has 2017 observations
datD2017<-subset(datD, datD$year==2017)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,180),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
#show sd
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
lines(datD2017$doy, datD2017$discharge, col="red")
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,180, by=30),
seq(0,180, by=30),
las = 2)#show ticks at 90 degree angle
#QUESTION 6 - NO CODE
#QUESTION 7
#create a dataframe that indicates what days have a full 24 hours
#of precipitation measurements
#give each obs a count
datP["Count"]<-1
#dataframe with all days and their number of observations
datC<-aggregate(datP[c("Count")], by=list(datP$dateonly), FUN="sum")
#days with a full 24 hours of precipitation measurements
datC1<-subset(datC, datC$Count==24)
#create a data frame with only days with full measures, start FALSE
datP["Full"]<-FALSE
#indicate if obs is part of day of full measure
datP <- transform(datP, Full= ifelse(datP$dateonly %in% datC1$Group.1, TRUE, FALSE))
#dataframe that indicates what days have full 24 hr measure with discharge data
datCombine<- datD
datCombine$Full<- datP$Full
datCombine<-transform(datCombine, Full= ifelse(datCombine$date %in% datC1$Group.1, TRUE, FALSE))
View(datCombine)
View(datC1)
datP$newdate<-format(datP$newdate, "%m/$d/$Y")
View(datP)
#strip time
datP$dateonly<-format(as.Date(datP$day), "%m/%d/%Y")
#Alexa Canaan
#activity 5
#QUESTION 1 - NO CODE NECESSARY
#load in lubridate
library(lubridate)
#read in streamflow data
datH <- read.csv("y:\\Data\\activities\\a05\\stream_flow_data.csv",
na.strings = c("Eqp"))
#read data on the mac
datH <- read.csv("~/Desktop/GitHub/GEOG331/a05/stream_flow_data.csv", na.strings = c("Eqp"))
#preview data
head(datH)
#read in precipitation data
#hourly precipitation is in mm
datP <- read.csv("y:\\Data\\activities\\a05\\2049867.csv")
#read data on the mac
datP <- read.csv("~/Desktop/GitHub/GEOG331/a05/2049867.csv")
#preview data
head(datP)
#only use most reliable measurements
datD <- datH[datH$discharge.flag == "A",]
#QUESTION 2
#### define time for streamflow #####
#convert date and time
datesD <- as.Date(datD$date, "%m/%d/%Y")
#get day of year
datD$doy <- yday(datesD)
#calculate year
datD$year <- year(datesD)
#define time
timesD <- hm(datD$time)
#### define time for precipitation #####
dateP <- ymd_hm(datP$DATE)
#get day of year
datP$doy <- yday(dateP)
#get year
datP$year <- year(dateP)
#### get decimal formats #####
#convert time from a string to a more usable format
#with a decimal hour
datD$hour <- hour(timesD ) + (minute(timesD )/60)
#get full decimal time
datD$decDay <- datD$doy + (datD$hour/24)
#calculate a decimal year, but account for leap year
datD$decYear <- ifelse(leap_year(datD$year),datD$year + (datD$decDay/366),
datD$year + (datD$decDay-1/365))
#calculate times for datP
datP$hour <- hour(dateP ) + (minute(dateP )/60)
#get full decimal time
datP$decDay <- datP$doy + (datP$hour/24)
#calculate a decimal year, but account for leap year
datP$decYear <- ifelse(leap_year(datP$year),datP$year + (datP$decDay/366),
datP$year + (datP$decDay-1/365))
#format precipitaiton date column
datP$day<-ymd_hm(datP$DATE)
#strip time
datP$dateonly<-format(as.Date(datP$day), "%m/%d/%Y")
#plot discharge
plot(datD$decYear, datD$discharge, type="l", xlab="Year", ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")))
#QUESTION 3 - No code
#QUESTION 4
#look up documentation
help(expression())
#basic formatting
aveF <- aggregate(datD$discharge, by=list(datD$doy), FUN="mean")
colnames(aveF) <- c("doy","dailyAve")
sdF <- aggregate(datD$discharge, by=list(datD$doy), FUN="sd")
colnames(sdF) <- c("doy","dailySD")
#start new plot
dev.new(width=8,height=8)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i")#remove gaps from axes
#show standard deviation around the mean
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,80, by=20),
seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,80, by=20),
seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
legend("topright", c("mean","1 standard deviation"), #legend items
lwd=c(2,NA),#lines
fill=c(NA,rgb(0.392, 0.584, 0.929,.2)),#fill boxes
border=NA,#no border for both fill boxes (don't need a vector here since both are the same)
bty="n")#no legend border
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,90),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,80, by=20),
seq(0,80, by=20),
las = 2)#show ticks at 90 degree angle
legend("topright", c("mean","1 standard deviation"), #legend items
lwd=c(2,NA),#lines
col=c("black",rgb(0.392, 0.584, 0.929,.2)),#colors
pch=c(NA,15),#symbols
bty="n")#no legend border
#QUESTION 5
#add a line that shows 2017 observations
#create a data frame that just has 2017 observations
datD2017<-subset(datD, datD$year==2017)
#bigger margins
par(mai=c(1,1,1,1))
#make plot
plot(aveF$doy,aveF$dailyAve,
type="l",
xlab="Year",
ylab=expression(paste("Discharge ft"^"3 ","sec"^"-1")),
lwd=2,
ylim=c(0,180),
xaxs="i", yaxs ="i",#remove gaps from axes
axes=FALSE)#no axes
#show sd
polygon(c(aveF$doy, rev(aveF$doy)),#x coordinates
c(aveF$dailyAve-sdF$dailySD,rev(aveF$dailyAve+sdF$dailySD)),#ycoord
col=rgb(0.392, 0.584, 0.929,.2), #color that is semi-transparent
border=NA#no border
)
lines(datD2017$doy, datD2017$discharge, col="red")
axis(1, seq(0,360, by=40), #tick intervals
lab=seq(0,360, by=40)) #tick labels
axis(2, seq(0,180, by=30),
seq(0,180, by=30),
las = 2)#show ticks at 90 degree angle
#QUESTION 6 - NO CODE
#QUESTION 7
#create a dataframe that indicates what days have a full 24 hours
#of precipitation measurements
#give each obs a count
datP["Count"]<-1
#dataframe with all days and their number of observations
datC<-aggregate(datP[c("Count")], by=list(datP$dateonly), FUN="sum")
#days with a full 24 hours of precipitation measurements
datC1<-subset(datC, datC$Count==24)
#create a data frame with only days with full measures, start FALSE
datP["Full"]<-FALSE
#indicate if obs is part of day of full measure
datP <- transform(datP, Full= ifelse(datP$dateonly %in% datC1$Group.1, TRUE, FALSE))
#dataframe that indicates what days have full 24 hr measure with discharge data
datCombine<- datD
datCombine<-transform(datCombine, Full= ifelse(datCombine$date %in% datC1$Group.1, TRUE, FALSE))
View(datCombine)
